@startuml

!theme toy

box SensorVision App #grey
    participant SensorVisionClient as Client
    participant MetadataState as State
    participant MqttClientWrapper as Mqtt
end box

participant "Mosquitto Broker" as Broker
participant "IoT Agent" as Agent

== Update Metric ==
--> Client ++: update_metric\n[sensor_id]\n[metric_id] [name] | [annotation]
note right Client: According to [[https://docs-iot.teamviewer.com/mqtt-api/#543-update Metric/Update]]
Client -> Mqtt --++: async_message to /sensor/<sensor_id>/metric/update\n[metric_id] [name] | [annotation]
Mqtt -> Broker --++: <forward> via request_client
Broker -> Agent --++: <forward>
Agent -> Agent : Update Metric
Broker <-- Agent --++: "All metrics were successfully modified."
note left Agent #pink
Very informative!
Thanks!!! (•̀o•́)ง
end note
Mqtt <-- Broker --++: <forward>
State <-- Mqtt --++: Call mqtt_callback\n[topic] [message]
State -> State ++: Call SensorUpdated\ncallback
Client <-- State --++: Fire SensorMetricsUpdated Event\n[sensor_id]
deactivate State

loop for each Metric in Sensor
    note right Client: According to [[https://docs-iot.teamviewer.com/mqtt-api/#542-describe Metric/Describe]]
    Client -> Mqtt ++--: Post to /sensor/<sensor_id>/metric/<metric_id>/inventory "{}"
    note over Mqtt: See describe_metric.puml
end loop
@enduml
