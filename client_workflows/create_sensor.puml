@startuml

!theme toy

box SensorVision App #grey
    participant SensorVisionClient as Client
    participant MetadataState as State
    participant MqttClientWrapper as Mqtt
end box

participant "Mosquitto Broker" as Broker
participant "IoT Agent" as Agent

== Create Sensor ==
--> Client ++: create_sensor\n[sensor_name]
note right Client: According to [[https://docs-iot.teamviewer.com/mqtt-api/#531-create Sensor/Create]]
Client -> Mqtt --++: async_message to /sensor/create\n'{"name":"sensor_name"}'
Mqtt -> Broker --++: <forward> via request_client
Broker -> Agent --++: <forward>
Agent -> Agent : Create Sensor
Broker <-- Agent --++: [metadata]
Mqtt <-- Broker --++: <forward>
State <-- Mqtt --++: Call mqtt_callback\n[topic] [message]
State -> State ++: Call SensorCreate\ncallback
note over State
Enable subscriptions to the
following sensor-aware response
topics using Sensor ID:
* [[https://docs-iot.teamviewer.com/mqtt-api/#533-update Sensor/Update]]
* [[https://docs-iot.teamviewer.com/mqtt-api/#534-delete Sensor/Delete]]

* [[https://docs-iot.teamviewer.com/mqtt-api/#541-create Metric/Create]]
* [[https://docs-iot.teamviewer.com/mqtt-api/#543-update Metric/Update]]
* [[https://docs-iot.teamviewer.com/mqtt-api/#534-delete Metric/Delete]]

* [[https://docs-iot.teamviewer.com/mqtt-api/#51-push-metric-values Sensor/PushValues]]
* [[https://docs-iot.teamviewer.com/mqtt-api/#52-get-metric-values Sensor/Livedata]]
end note
State -> State : Subscribe for sensor events
Client <-- State --++: Fire NewSensorCreated Event\n[sensor_id] [sensor_name]
deactivate State
<-- Client: Fire NewSensor Event\n[sensor_id] [sensor_name]

@enduml
