@startuml

!theme toy

box SensorVision App #grey
    participant SensorVisionClient as Client
    participant MetadataState as State
    participant MqttClientWrapper as Mqtt
end box

participant "Mosquitto Broker" as Broker
participant "IoT Agent" as Agent

== Create Metrics ==
--> Client ++: create_metrics\n[sensor_id]\n[array<metric_metadata>]
note right Client: According to [[https://docs-iot.teamviewer.com/mqtt-api/#541-create Metric/Create]]
Client -> Mqtt --++: async_message to /sensor<sensor_id>/metric/create\n[metadata]
Mqtt -> Broker --++: <forward> via request_client
Broker -> Agent --++: <forward>
Agent -> Agent : Create Metrics
Broker <-- Agent --++: [array<metric_id>]
Mqtt <-- Broker --++: <forward>
State <-- Mqtt --++: Call mqtt_callback\n[topic] [message]
State -> State ++: Call MetricCreate\ncallback\n[sensor_id]\n[array<metric_id>]
loop for each Metric ID
note over State
Enable subscriptions to the
following metric-aware response
topics using Sensor ID and Metric ID:
* [[https://docs-iot.teamviewer.com/mqtt-api/#542-describe Metric/Describe]]
end note
State -> State : Subscribe for metric events
Client <-- State --++: Fire NewMetricCreated Event\n[sensor_id] [metric_id]
deactivate State
note right Client: According to [[https://docs-iot.teamviewer.com/mqtt-api/#542-describe Metric/Describe]]
Client -> Mqtt ++--: Post to /sensor/<sensor_id>/metric/<metric_id>/inventory "{}"
note right Client: See describe_metric.puml
end

@enduml
